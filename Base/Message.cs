// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Base/message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HookKeylogger.Base {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Message {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Message() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJCYXNlL21lc3NhZ2UucHJvdG8SBGJhc2UiQgoIS2V5UHJlc3MSCwoDa2V5", 
            "GAEgASgFEhYKDmFjdGl2ZV9wcm9ncmFtGAIgASgJEhEKCXRpbWVzdGFtcBgD", 
            "IAEoAyIrCgtLZXlQcmVzc1NldBIcCgRrZXlzGAEgAygLMg4uYmFzZS5LZXlQ", 
            "cmVzcyIVChNQdXRLZXlQcmVzc1Jlc3BvbnNlMlAKEktlclByZXNzQWdnZXJn", 
            "YXRvchI6CgtQdXRLZXlQcmVzcxIOLmJhc2UuS2V5UHJlc3MaGS5iYXNlLlB1", 
            "dEtleVByZXNzUmVzcG9uc2UiAEIVqgISSG9va0tleWxvZ2dlci5CYXNlYgZw", 
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::HookKeylogger.Base.KeyPress), new[]{ "Key", "ActiveProgram", "Timestamp" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::HookKeylogger.Base.KeyPressSet), new[]{ "Keys" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::HookKeylogger.Base.PutKeyPressResponse), null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class KeyPress : pb::IMessage<KeyPress> {
    private static readonly pb::MessageParser<KeyPress> _parser = new pb::MessageParser<KeyPress>(() => new KeyPress());
    public static pb::MessageParser<KeyPress> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::HookKeylogger.Base.Message.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public KeyPress() {
      OnConstruction();
    }

    partial void OnConstruction();

    public KeyPress(KeyPress other) : this() {
      key_ = other.key_;
      activeProgram_ = other.activeProgram_;
      timestamp_ = other.timestamp_;
    }

    public KeyPress Clone() {
      return new KeyPress(this);
    }

    public const int KeyFieldNumber = 1;
    private int key_;
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public const int ActiveProgramFieldNumber = 2;
    private string activeProgram_ = "";
    public string ActiveProgram {
      get { return activeProgram_; }
      set {
        activeProgram_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as KeyPress);
    }

    public bool Equals(KeyPress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (ActiveProgram != other.ActiveProgram) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (ActiveProgram.Length != 0) hash ^= ActiveProgram.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (ActiveProgram.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActiveProgram);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (ActiveProgram.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveProgram);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    public void MergeFrom(KeyPress other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.ActiveProgram.Length != 0) {
        ActiveProgram = other.ActiveProgram;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 18: {
            ActiveProgram = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class KeyPressSet : pb::IMessage<KeyPressSet> {
    private static readonly pb::MessageParser<KeyPressSet> _parser = new pb::MessageParser<KeyPressSet>(() => new KeyPressSet());
    public static pb::MessageParser<KeyPressSet> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::HookKeylogger.Base.Message.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public KeyPressSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    public KeyPressSet(KeyPressSet other) : this() {
      keys_ = other.keys_.Clone();
    }

    public KeyPressSet Clone() {
      return new KeyPressSet(this);
    }

    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HookKeylogger.Base.KeyPress> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::HookKeylogger.Base.KeyPress.Parser);
    private readonly pbc::RepeatedField<global::HookKeylogger.Base.KeyPress> keys_ = new pbc::RepeatedField<global::HookKeylogger.Base.KeyPress>();
    public pbc::RepeatedField<global::HookKeylogger.Base.KeyPress> Keys {
      get { return keys_; }
    }

    public override bool Equals(object other) {
      return Equals(other as KeyPressSet);
    }

    public bool Equals(KeyPressSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    public void MergeFrom(KeyPressSet other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PutKeyPressResponse : pb::IMessage<PutKeyPressResponse> {
    private static readonly pb::MessageParser<PutKeyPressResponse> _parser = new pb::MessageParser<PutKeyPressResponse>(() => new PutKeyPressResponse());
    public static pb::MessageParser<PutKeyPressResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::HookKeylogger.Base.Message.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PutKeyPressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PutKeyPressResponse(PutKeyPressResponse other) : this() {
    }

    public PutKeyPressResponse Clone() {
      return new PutKeyPressResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PutKeyPressResponse);
    }

    public bool Equals(PutKeyPressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PutKeyPressResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
