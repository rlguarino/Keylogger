// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerProxy/service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HookKeylogger.UploadProxy.Rpc {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Service {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Service() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlTZXJ2ZXJQcm94eS9zZXJ2aWNlLnByb3RvEgNycGMaFVNlcnZlci9tZXNz", 
            "YWdlcy5wcm90byIkCgtTZW5kUmVxdWVzdBIVCgJjaRgBIAEoCzIJLnR5cGVz", 
            "LkNJIlUKDFNlbmRSZXNwb25zZRIoCgZzdGF0dXMYASABKA4yGC5ycGMuU2Vu", 
            "ZFJlc3BvbnNlLlN0YXR1cyIbCgZTdGF0dXMSBgoCT0sQABIJCgVFUlJPUhAB", 
            "Mj4KC1VwbG9hZFByb3h5Ei8KBlNlbmRDaRIQLnJwYy5TZW5kUmVxdWVzdBoR", 
            "LnJwYy5TZW5kUmVzcG9uc2UiAEIgqgIdSG9va0tleWxvZ2dlci5VcGxvYWRQ", 
            "cm94eS5ScGNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { global::HookKeylogger.AggergationServer.Types.Messages.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::HookKeylogger.UploadProxy.Rpc.SendRequest), new[]{ "Ci" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::HookKeylogger.UploadProxy.Rpc.SendResponse), new[]{ "Status" }, null, new[]{ typeof(global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendRequest : pb::IMessage<SendRequest> {
    private static readonly pb::MessageParser<SendRequest> _parser = new pb::MessageParser<SendRequest>(() => new SendRequest());
    public static pb::MessageParser<SendRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::HookKeylogger.UploadProxy.Rpc.Service.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SendRequest(SendRequest other) : this() {
      Ci = other.ci_ != null ? other.Ci.Clone() : null;
    }

    public SendRequest Clone() {
      return new SendRequest(this);
    }

    public const int CiFieldNumber = 1;
    private global::HookKeylogger.AggergationServer.Types.CI ci_;
    public global::HookKeylogger.AggergationServer.Types.CI Ci {
      get { return ci_; }
      set {
        ci_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SendRequest);
    }

    public bool Equals(SendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ci, other.Ci)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ci_ != null) hash ^= Ci.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ci_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ci);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ci_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ci);
      }
      return size;
    }

    public void MergeFrom(SendRequest other) {
      if (other == null) {
        return;
      }
      if (other.ci_ != null) {
        if (ci_ == null) {
          ci_ = new global::HookKeylogger.AggergationServer.Types.CI();
        }
        Ci.MergeFrom(other.Ci);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ci_ == null) {
              ci_ = new global::HookKeylogger.AggergationServer.Types.CI();
            }
            input.ReadMessage(ci_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendResponse : pb::IMessage<SendResponse> {
    private static readonly pb::MessageParser<SendResponse> _parser = new pb::MessageParser<SendResponse>(() => new SendResponse());
    public static pb::MessageParser<SendResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::HookKeylogger.UploadProxy.Rpc.Service.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SendResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SendResponse(SendResponse other) : this() {
      status_ = other.status_;
    }

    public SendResponse Clone() {
      return new SendResponse(this);
    }

    public const int StatusFieldNumber = 1;
    private global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status status_ = global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status.OK;
    public global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SendResponse);
    }

    public bool Equals(SendResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status.OK) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status.OK) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status.OK) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    public void MergeFrom(SendResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status.OK) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::HookKeylogger.UploadProxy.Rpc.SendResponse.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Status {
        OK = 0,
        ERROR = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
