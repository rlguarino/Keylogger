// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerProxy/service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HookKeylogger.ServerProxy.Rpc {
  public static class ServerProxy
  {
    static readonly string __ServiceName = "proxy.ServerProxy";

    static readonly Marshaller<global::HookKeylogger.ServerProxy.Rpc.SendRequest> __Marshaller_SendRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HookKeylogger.ServerProxy.Rpc.SendRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HookKeylogger.ServerProxy.Rpc.SendResponse> __Marshaller_SendResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HookKeylogger.ServerProxy.Rpc.SendResponse.Parser.ParseFrom);

    static readonly Method<global::HookKeylogger.ServerProxy.Rpc.SendRequest, global::HookKeylogger.ServerProxy.Rpc.SendResponse> __Method_SendCi = new Method<global::HookKeylogger.ServerProxy.Rpc.SendRequest, global::HookKeylogger.ServerProxy.Rpc.SendResponse>(
        MethodType.Unary,
        __ServiceName,
        "SendCi",
        __Marshaller_SendRequest,
        __Marshaller_SendResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HookKeylogger.ServerProxy.Rpc.Service.Descriptor.Services[0]; }
    }

    // client interface
    public interface IServerProxyClient
    {
      global::HookKeylogger.ServerProxy.Rpc.SendResponse SendCi(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::HookKeylogger.ServerProxy.Rpc.SendResponse SendCi(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, CallOptions options);
      AsyncUnaryCall<global::HookKeylogger.ServerProxy.Rpc.SendResponse> SendCiAsync(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::HookKeylogger.ServerProxy.Rpc.SendResponse> SendCiAsync(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, CallOptions options);
    }

    // server-side interface
    public interface IServerProxy
    {
      Task<global::HookKeylogger.ServerProxy.Rpc.SendResponse> SendCi(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, ServerCallContext context);
    }

    // client stub
    public class ServerProxyClient : ClientBase, IServerProxyClient
    {
      public ServerProxyClient(Channel channel) : base(channel)
      {
      }
      public global::HookKeylogger.ServerProxy.Rpc.SendResponse SendCi(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SendCi, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::HookKeylogger.ServerProxy.Rpc.SendResponse SendCi(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_SendCi, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::HookKeylogger.ServerProxy.Rpc.SendResponse> SendCiAsync(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SendCi, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::HookKeylogger.ServerProxy.Rpc.SendResponse> SendCiAsync(global::HookKeylogger.ServerProxy.Rpc.SendRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_SendCi, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IServerProxy serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_SendCi, serviceImpl.SendCi).Build();
    }

    // creates a new client
    public static ServerProxyClient NewClient(Channel channel)
    {
      return new ServerProxyClient(channel);
    }

  }
}
#endregion
